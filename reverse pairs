class Solution {

    public static int merge(int[] nums,int low,int mid,int high,int[] temp){
         int cnt=0;
        int j=mid;
        for(int i=low;i<mid;i++){
            while(j<=high && nums[i]>2*nums[j]) j++;
                cnt+=(j-(mid));
            
        }
        
        int left=low,k=low;
        int right=mid;
        while(left<=mid-1 && right<=high){
            if(nums[left]<=nums[right]){
                temp[k++]=nums[left++];
            }else{
                temp[k++]=nums[right++];
            }
        }
        while(left<=mid-1){
            temp[k++]=nums[left++];
        }
        while(right<=high){
            temp[k++]=nums[right++];
        }

        for(int i=low;i<=high;i++){
            nums[i]=temp[i];
        }
        return cnt;

    }

    public static int mergeSort(int[] nums,int low,int high,int temp[]){
        int count=0;
        if(low<high){
        int mid=(low+high)/2;
        count+=mergeSort(nums,low,mid,temp);
        count+=mergeSort(nums,mid+1,high,temp);
        count+=merge(nums,low,mid+1,high,temp);
        }
        return count;
        
    }

    public int reversePairs(int[] nums) {
        int[]  temp=new int[nums.length];
        int n=nums.length;
        return mergeSort(nums,0,n-1,temp);
    }
}
